"use strict";
(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
	[3977], {
		75286: function(e, C, t) {
			t.d(C, {
				Z: function() {
					return E
				}
			});
			var i = t(50959),
				n = t(82187),
				l = t.n(n);
			let r = e => e ? "function" == typeof e ? e() : e : null;
			var a = t(46297),
				s = t(77286),
				o = t(24351),
				c = t(3846),
				d = t(26781),
				p = t(92037),
				h = t(23306),
				u = t(92747),
				x = t(62826),
				w = t(29186),
				m = t(84551);
			let f = e => {
					let {
						componentCls: C,
						popoverColor: t,
						titleMinWidth: i,
						fontWeightStrong: n,
						innerPadding: l,
						boxShadowSecondary: r,
						colorTextHeading: a,
						borderRadiusLG: s,
						zIndexPopup: o,
						titleMarginBottom: c,
						colorBgElevated: p,
						popoverBg: u,
						titleBorderBottom: x,
						innerContentPadding: w,
						titlePadding: m
					} = e;
					return [{
						[C]: Object.assign(Object.assign({}, (0, d.Wf)(e)), {
							position: "absolute",
							top: 0,
							left: {
								_skip_check_: !0,
								value: 0
							},
							zIndex: o,
							fontWeight: "normal",
							whiteSpace: "normal",
							textAlign: "start",
							cursor: "auto",
							userSelect: "text",
							transformOrigin: "var(--arrow-x, 50%) var(--arrow-y, 50%)",
							"--antd-arrow-background-color": p,
							"&-rtl": {
								direction: "rtl"
							},
							"&-hidden": {
								display: "none"
							},
							[`${C}-content`]: {
								position: "relative"
							},
							[`${C}-inner`]: {
								backgroundColor: u,
								backgroundClip: "padding-box",
								borderRadius: s,
								boxShadow: r,
								padding: l
							},
							[`${C}-title`]: {
								minWidth: i,
								marginBottom: c,
								color: a,
								fontWeight: n,
								borderBottom: x,
								padding: m
							},
							[`${C}-inner-content`]: {
								color: t,
								padding: w
							}
						})
					}, (0, h.ZP)(e, "var(--antd-arrow-background-color)"), {
						[`${C}-pure`]: {
							position: "relative",
							maxWidth: "none",
							margin: e.sizePopupArrow,
							display: "inline-block",
							[`${C}-content`]: {
								display: "inline-block"
							}
						}
					}]
				},
				g = e => {
					let {
						componentCls: C
					} = e;
					return {
						[C]: u.i.map(t => {
							let i = e[`${t}6`];
							return {
								[`&${C}-${t}`]: {
									"--antd-arrow-background-color": i,
									[`${C}-inner`]: {
										backgroundColor: i
									},
									[`${C}-arrow`]: {
										background: "transparent"
									}
								}
							}
						})
					}
				};
			var v = (0, x.I$)("Popover", e => {
					let {
						colorBgElevated: C,
						colorText: t
					} = e, i = (0, w.TS)(e, {
						popoverBg: C,
						popoverColor: t
					});
					return [f(i), g(i), (0, p._y)(i, "zoom-big")]
				}, e => {
					let {
						lineWidth: C,
						controlHeight: t,
						fontHeight: i,
						padding: n,
						wireframe: l,
						zIndexPopupBase: r,
						borderRadiusLG: a,
						marginXS: s,
						lineType: o,
						colorSplit: c,
						paddingSM: d
					} = e, p = t - i;
					return Object.assign(Object.assign(Object.assign({
						titleMinWidth: 177,
						zIndexPopup: r + 30
					}, (0, m.w)(e)), (0, h.wZ)({
						contentRadius: a,
						limitVerticalRadius: !0
					})), {
						innerPadding: l ? 0 : 12,
						titleMarginBottom: l ? 0 : s,
						titlePadding: l ? `${p/2}px ${n}px ${p/2-C}px` : 0,
						titleBorderBottom: l ? `${C}px ${o} ${c}` : "none",
						innerContentPadding: l ? `${d}px ${n}px` : 0
					})
				}, {
					resetStyle: !1,
					deprecatedTokens: [
						["width", "titleMinWidth"],
						["minWidth", "titleMinWidth"]
					]
				}),
				b = function(e, C) {
					var t = {};
					for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && 0 > C.indexOf(i) && (t[i] = e[i]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols)
						for (var n = 0, i = Object.getOwnPropertySymbols(e); n < i.length; n++) 0 > C.indexOf(i[n]) && Object.prototype.propertyIsEnumerable.call(e, i[n]) && (t[i[n]] = e[i[n]]);
					return t
				};
			let j = (e, C, t) => C || t ? i.createElement(i.Fragment, null, C && i.createElement("div", {
					className: `${e}-title`
				}, r(C)), i.createElement("div", {
					className: `${e}-inner-content`
				}, r(t))) : null,
				k = e => {
					let {
						hashId: C,
						prefixCls: t,
						className: n,
						style: r,
						placement: a = "top",
						title: s,
						content: o,
						children: d
					} = e;
					return i.createElement("div", {
						className: l()(C, t, `${t}-pure`, `${t}-placement-${a}`, n),
						style: r
					}, i.createElement("div", {
						className: `${t}-arrow`
					}), i.createElement(c.G, Object.assign({}, e, {
						className: C,
						prefixCls: t
					}), d || j(t, s, o)))
				};
			var M = function(e, C) {
				var t = {};
				for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && 0 > C.indexOf(i) && (t[i] = e[i]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols)
					for (var n = 0, i = Object.getOwnPropertySymbols(e); n < i.length; n++) 0 > C.indexOf(i[n]) && Object.prototype.propertyIsEnumerable.call(e, i[n]) && (t[i[n]] = e[i[n]]);
				return t
			};
			let Z = e => {
					let {
						title: C,
						content: t,
						prefixCls: n
					} = e;
					return i.createElement(i.Fragment, null, C && i.createElement("div", {
						className: `${n}-title`
					}, r(C)), i.createElement("div", {
						className: `${n}-inner-content`
					}, r(t)))
				},
				y = i.forwardRef((e, C) => {
					let {
						prefixCls: t,
						title: n,
						content: r,
						overlayClassName: c,
						placement: d = "top",
						trigger: p = "hover",
						mouseEnterDelay: h = .1,
						mouseLeaveDelay: u = .1,
						overlayStyle: x = {}
					} = e, w = M(e, ["prefixCls", "title", "content", "overlayClassName", "placement", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle"]), {
						getPrefixCls: m
					} = i.useContext(s.E_), f = m("popover", t), [g, b, j] = v(f), k = m(), y = l()(c, b, j);
					return g(i.createElement(o.Z, Object.assign({
						placement: d,
						trigger: p,
						mouseEnterDelay: h,
						mouseLeaveDelay: u,
						overlayStyle: x
					}, w, {
						prefixCls: f,
						overlayClassName: y,
						ref: C,
						overlay: n || r ? i.createElement(Z, {
							prefixCls: f,
							title: n,
							content: r
						}) : null,
						transitionName: (0, a.m)(k, "zoom-big", w.transitionName),
						"data-popover-inject": !0
					})))
				});
			y._InternalPanelDoNotUseOrYouWillBeFired = e => {
				let {
					prefixCls: C,
					className: t
				} = e, n = b(e, ["prefixCls", "className"]), {
					getPrefixCls: r
				} = i.useContext(s.E_), a = r("popover", C), [o, c, d] = v(a);
				return o(i.createElement(k, Object.assign({}, n, {
					prefixCls: a,
					hashId: c,
					className: l()(t, d)
				})))
			};
			var E = y
		},
		8949: function(e, C, t) {
			t.d(C, {
				ZP: function() {
					return g
				},
				g0: function() {
					return n
				}
			});
			var i, n, l = t(11527),
				r = t(91489),
				a = t(75286);
			t(50959);
			var s = t(10081),
				o = t.n(s),
				c = t(24426),
				d = t.n(c),
				p = function() {
					return (0, l.jsx)("div", {
						className: "hover:cursor-pointer group",
						onClick: function() {
							return window.open("https://discord.gg/UgwesKSr", "_blank")
						},
						children: (0, l.jsx)("svg", {
							xmlns: "http://www.w3.org/2000/svg",
							width: "36",
							height: "36",
							viewBox: "0 0 36 36",
							fill: "none",
							children: (0, l.jsx)("path", {
								d: "M25.889 11.7669C25.8833 11.7563 25.874 11.7479 25.8627 11.7434C24.5522 11.1578 23.1693 10.7402 21.7485 10.501C21.7356 10.4987 21.7222 10.5004 21.7104 10.5058C21.6985 10.5113 21.6887 10.5203 21.6824 10.5315C21.4941 10.8644 21.3231 11.2064 21.1702 11.556C19.6387 11.3296 18.0808 11.3296 16.5493 11.556C16.3954 11.2055 16.2217 10.8634 16.029 10.5315C16.0224 10.5205 16.0126 10.5118 16.0008 10.5063C15.989 10.5009 15.9758 10.499 15.9629 10.501C14.542 10.7396 13.1589 11.1573 11.8486 11.7434C11.8374 11.7481 11.8279 11.756 11.8215 11.7661C9.20116 15.5776 8.48334 19.2955 8.83548 22.9673C8.83647 22.9763 8.83931 22.985 8.84383 22.9929C8.84834 23.0008 8.85445 23.0077 8.86178 23.0133C10.3876 24.1137 12.0942 24.9537 13.9089 25.4973C13.9217 25.5011 13.9353 25.5009 13.948 25.4968C13.9607 25.4928 13.9718 25.4851 13.9798 25.4747C14.3695 24.9581 14.7149 24.4112 15.0123 23.8393C15.0164 23.8315 15.0187 23.8229 15.0192 23.8141C15.0196 23.8053 15.0181 23.7965 15.0148 23.7884C15.0115 23.7802 15.0064 23.7728 15 23.7666C14.9935 23.7605 14.9858 23.7557 14.9773 23.7527C14.4327 23.5497 13.9055 23.3051 13.4006 23.021C13.3914 23.0158 13.3837 23.0084 13.3782 22.9995C13.3726 22.9907 13.3694 22.9807 13.3687 22.9703C13.3681 22.96 13.3701 22.9496 13.3745 22.9402C13.379 22.9308 13.3858 22.9226 13.3942 22.9163C13.5005 22.839 13.6049 22.7594 13.7073 22.6774C13.7163 22.6702 13.7272 22.6655 13.7387 22.664C13.7503 22.6625 13.762 22.6642 13.7727 22.6688C17.0805 24.1392 20.6618 24.1392 23.9305 22.6688C23.9411 22.6639 23.953 22.662 23.9647 22.6634C23.9764 22.6648 23.9875 22.6693 23.9966 22.6766C24.0992 22.759 24.2039 22.839 24.3105 22.9163C24.319 22.9225 24.3259 22.9307 24.3304 22.9401C24.3349 22.9495 24.337 22.9598 24.3364 22.9701C24.3359 22.9805 24.3327 22.9905 24.3272 22.9994C24.3217 23.0083 24.3141 23.0157 24.3049 23.021C23.8012 23.3075 23.2735 23.552 22.7275 23.7519C22.719 23.7551 22.7113 23.7599 22.7049 23.7662C22.6985 23.7724 22.6935 23.7799 22.6902 23.7881C22.687 23.7964 22.6855 23.8052 22.686 23.814C22.6865 23.8229 22.689 23.8315 22.6931 23.8393C22.9955 24.408 23.3404 24.9543 23.7248 25.4738C23.7326 25.4844 23.7437 25.4924 23.7564 25.4966C23.7691 25.5008 23.7829 25.501 23.7958 25.4972C25.6136 24.9554 27.3233 24.1154 28.851 23.0133C28.8584 23.008 28.8646 23.0012 28.8692 22.9934C28.8737 22.9856 28.8765 22.977 28.8773 22.968C29.2989 18.7231 28.1715 15.0357 25.889 11.7669ZM15.5063 20.7315C14.5104 20.7315 13.6898 19.8413 13.6898 18.7481C13.6898 17.6548 14.4945 16.7645 15.5063 16.7645C16.5261 16.7645 17.3387 17.6625 17.3228 18.748C17.3228 19.8413 16.5181 20.7315 15.5063 20.7315ZM22.2225 20.7315C21.2266 20.7315 20.406 19.8413 20.406 18.7481C20.406 17.6548 21.2107 16.7645 22.2225 16.7645C23.2423 16.7645 24.0549 17.6625 24.039 18.748C24.039 19.8413 23.2423 20.7315 22.2225 20.7315Z",
								fill: "#fff"
							})
						})
					})
				},
				h = function() {
					return (0, l.jsx)("div", {
						className: "hover:cursor-pointer group",
						onClick: function() {
							return window.open("https://x.com/MiniMax__AI", "_blank")
						},
						children: (0, l.jsx)("svg", {
							xmlns: "http://www.w3.org/2000/svg",
							width: "36",
							height: "36",
							viewBox: "0 0 36 36",
							fill: "none",
							children: (0, l.jsx)("path", {
								d: "M20.3046 16.7523L26.3733 9.84961H24.9354L19.6636 15.8418L15.4561 9.84961H10.6021L16.9661 18.9117L10.6021 26.1496H12.0399L17.6037 19.8201L22.048 26.1496H26.9021L20.3046 16.7523ZM18.3346 18.9913L17.6888 18.0883L12.5585 10.9103H14.7674L18.9089 16.7054L19.552 17.6083L24.9347 25.1406H22.7258L18.3346 18.9913Z",
								fill: "#fff"
							})
						})
					})
				},
				u = function() {
					return (0, l.jsx)(a.Z, {
						placement: "top",
						content: "api@minimaxi.com",
						overlayClassName: "rounded-[6px]",
						children: (0, l.jsx)("div", {
							className: "hover:cursor-pointer group",
							onClick: function() {
								return d().push("mailto:api@minimaxi.com")
							},
							children: (0, l.jsx)("svg", {
								xmlns: "http://www.w3.org/2000/svg",
								width: "36",
								height: "36",
								viewBox: "0 0 36 36",
								fill: "none",
								children: (0, l.jsx)("path", {
									"fill-rule": "evenodd",
									"clip-rule": "evenodd",
									d: "M9.75195 12.536C9.75195 11.4709 10.6154 10.6074 11.6805 10.6074H25.8234C26.8885 10.6074 27.752 11.4709 27.752 12.536V12.9756L19.2449 18.648C19.1249 18.7252 18.9508 18.7802 18.7519 18.7802C18.5531 18.7802 18.379 18.7252 18.259 18.648L9.75195 12.9757V12.536ZM9.75195 14.9073V23.4646C9.75195 24.5297 10.6154 25.3931 11.6805 25.3931H25.8234C26.8885 25.3931 27.752 24.5297 27.752 23.4646V14.9073L20.132 19.9881L20.1246 19.9931C19.7201 20.2564 19.2343 20.3874 18.7519 20.3874C18.2696 20.3874 17.7838 20.2564 17.3793 19.993L17.3718 19.9882L9.75195 14.9073Z",
									fill: "#fff"
								})
							})
						})
					})
				},
				x = function() {
					return (0, l.jsx)(a.Z, {
						placement: "top",
						content: (0, l.jsxs)("div", {
							className: "",
							children: [(0, l.jsx)(o(), {
								width: 36,
								height: 36,
								className: "rounded-lg mx-auto block",
								alt: "微信公众号",
								src: r.gk
							}), (0, l.jsx)("div", {
								className: "pb-[10px] text-center text-[12px]",
								children: "微信公众号"
							})]
						}),
						className: "cursor-pointer",
						children: (0, l.jsx)("div", {
							className: "hover:cursor-pointer group",
							children: (0, l.jsx)("svg", {
								width: "36",
								height: "36",
								viewBox: "0 0 36 36",
								fill: "none",
								xmlns: "http://www.w3.org/2000/svg",
								children: (0, l.jsx)("path", {
									d: "M21.7717 14.5953C22.0142 14.5953 22.2568 14.6177 22.498 14.6389C21.849 11.6269 18.5931 9.37646 14.8842 9.37646C10.7367 9.39105 7.33838 12.1942 7.33838 15.7535C7.33838 17.8056 8.4712 19.498 10.3529 20.8084L9.59341 23.0562L12.2347 21.7472C13.181 21.9325 13.9406 22.1175 14.8749 22.1175C15.1174 22.1175 15.3481 22.1069 15.5785 22.0856C15.4287 21.5745 15.3511 21.0449 15.348 20.5123C15.3588 17.249 18.1867 14.5967 21.7732 14.5967L21.7717 14.5953ZM17.7123 12.567C18.2853 12.567 18.6584 12.9372 18.6584 13.5058C18.6584 14.0611 18.2853 14.4446 17.7123 14.4446C17.1511 14.4446 16.5794 14.073 16.5794 13.5057C16.5794 12.9372 17.1511 12.567 17.7123 12.567ZM12.4307 14.4446C11.871 14.4446 11.298 14.073 11.298 13.5057C11.298 12.9372 11.871 12.567 12.4307 12.567C12.9918 12.567 13.377 12.9372 13.377 13.5058C13.377 14.0611 13.0039 14.4446 12.4307 14.4446ZM28.6619 20.4342C28.6619 17.4433 25.6472 14.9985 22.2461 14.9985C18.6597 14.9985 15.8318 17.4432 15.8318 20.4342C15.8318 23.4357 18.6598 25.8711 22.2461 25.8711C22.9952 25.8711 23.7547 25.686 24.513 25.4996L26.5814 26.6235L26.0097 24.7565C27.529 23.6115 28.6619 22.1147 28.6619 20.4342ZM20.1671 19.4953C19.7939 19.4953 19.4074 19.1253 19.4074 18.7417C19.4074 18.3716 19.7939 17.988 20.1671 17.988C20.7402 17.988 21.1134 18.3596 21.1134 18.7417C21.1134 19.1252 20.7402 19.4953 20.1671 19.4953ZM24.3158 19.4953C23.9414 19.4953 23.5668 19.1253 23.5668 18.7417C23.5668 18.3716 23.94 17.988 24.3158 17.988C24.8876 17.988 25.262 18.3596 25.262 18.7417C25.262 19.1252 24.8876 19.4953 24.3158 19.4953Z",
									fill: "#fff"
								})
							})
						})
					})
				},
				w = function() {
					return (0, l.jsx)("div", {
						className: "hover:cursor-pointer group",
						onClick: function() {
							return window.open("https://github.com/MiniMax-AI ", "_blank")
						},
						children: (0, l.jsxs)("svg", {
							width: "36",
							height: "36",
							viewBox: "0 0 36 36",
							fill: "none",
							xmlns: "http://www.w3.org/2000/svg",
							children: [(0, l.jsxs)("g", {
								"clip-path": "url(#clip0_443_32320)",
								children: [(0, l.jsx)("path", {
									d: "M18.0001 8C12.4779 8 8 12.5904 8 18.2532C8 22.7833 10.8653 26.6266 14.8387 27.9824C15.3384 28.0773 15.5219 27.76 15.5219 27.4891C15.5219 27.2446 15.5126 26.437 15.5083 25.5802C12.7263 26.2004 12.1393 24.3705 12.1393 24.3705C11.6844 23.1854 11.0289 22.8702 11.0289 22.8702C10.1216 22.2339 11.0973 22.2469 11.0973 22.2469C12.1015 22.3193 12.6303 23.3035 12.6303 23.3035C13.5222 24.871 14.9697 24.4178 15.5403 24.1559C15.6301 23.4932 15.8892 23.0409 16.1752 22.7848C13.954 22.5256 11.6191 21.6464 11.6191 17.7177C11.6191 16.5982 12.0098 15.6836 12.6495 14.9656C12.5456 14.7073 12.2034 13.6645 12.7463 12.2522C12.7463 12.2522 13.5861 11.9766 15.4971 13.3032C16.2948 13.076 17.1502 12.9621 18.0001 12.9582C18.8499 12.9621 19.7061 13.076 20.5052 13.3032C22.4139 11.9766 23.2525 12.2522 23.2525 12.2522C23.7968 13.6645 23.4544 14.7073 23.3505 14.9656C23.9917 15.6836 24.3797 16.5982 24.3797 17.7177C24.3797 21.6557 22.0403 22.5228 19.8135 22.7767C20.1722 23.0949 20.4918 23.7188 20.4918 24.6754C20.4918 26.0473 20.4802 27.1514 20.4802 27.4891C20.4802 27.762 20.6602 28.0817 21.1671 27.981C25.1383 26.6237 28 22.7818 28 18.2532C28 12.5904 23.5227 8 18.0001 8Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M11.817 22.651C11.795 22.7014 11.717 22.7165 11.646 22.6819C11.5736 22.6488 11.5329 22.58 11.5564 22.5294C11.5779 22.4775 11.656 22.463 11.7283 22.4978C11.8008 22.5309 11.8422 22.6004 11.817 22.651Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M12.2213 23.1096C12.1737 23.1545 12.0807 23.1336 12.0175 23.0627C11.9522 22.9919 11.94 22.8972 11.9883 22.8517C12.0374 22.8068 12.1276 22.8278 12.1931 22.8986C12.2583 22.9702 12.2711 23.0642 12.2213 23.1096Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M12.6149 23.6943C12.5537 23.7375 12.4537 23.697 12.3919 23.6067C12.3307 23.5164 12.3307 23.4081 12.3932 23.3648C12.4552 23.3214 12.5537 23.3604 12.6164 23.45C12.6773 23.5418 12.6773 23.6501 12.6149 23.6943Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M13.154 24.2591C13.0993 24.3205 12.9828 24.304 12.8975 24.2203C12.8102 24.1384 12.7859 24.0223 12.8408 23.9609C12.8962 23.8994 13.0134 23.9167 13.0993 23.9997C13.1859 24.0814 13.2124 24.1985 13.154 24.2591Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M13.8978 24.5871C13.8737 24.6666 13.7615 24.7028 13.6484 24.669C13.5355 24.6342 13.4616 24.5411 13.4845 24.4607C13.5079 24.3807 13.6207 24.343 13.7345 24.3792C13.8473 24.4138 13.9213 24.5063 13.8978 24.5871Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M14.7147 24.648C14.7175 24.7317 14.6216 24.8011 14.503 24.8027C14.3836 24.8053 14.2871 24.7376 14.2858 24.6552C14.2858 24.5707 14.3795 24.5019 14.4988 24.4999C14.6175 24.4975 14.7147 24.5648 14.7147 24.648Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M15.4749 24.5164C15.4891 24.5981 15.4066 24.6819 15.2888 24.7043C15.1729 24.7258 15.0656 24.6754 15.0509 24.5944C15.0365 24.5106 15.1205 24.4267 15.2362 24.4051C15.3542 24.3842 15.4598 24.4333 15.4749 24.5164Z",
									fill: "white"
								})]
							}), (0, l.jsx)("defs", {
								children: (0, l.jsx)("clipPath", {
									id: "clip0_443_32320",
									children: (0, l.jsx)("rect", {
										width: "20",
										height: "20",
										fill: "white",
										transform: "translate(8 8)"
									})
								})
							})]
						})
					})
				},
				m = function() {
					return (0, l.jsx)("div", {
						className: "hover:cursor-pointer group",
						onClick: function() {
							return window.open("https://huggingface.co/MiniMax-AI ", "_blank")
						},
						children: (0, l.jsxs)("svg", {
							width: "36",
							height: "36",
							viewBox: "0 0 36 36",
							fill: "none",
							xmlns: "http://www.w3.org/2000/svg",
							children: [(0, l.jsxs)("g", {
								"clip-path": "url(#clip0_443_40935)",
								children: [(0, l.jsx)("path", {
									d: "M17.9371 26.0622C19.078 26.0622 20.2077 25.8375 21.2617 25.4009C22.3157 24.9643 23.2734 24.3244 24.0802 23.5177C24.8869 22.7109 25.5268 21.7532 25.9634 20.6992C26.4 19.6452 26.6247 18.5155 26.6247 17.3746C26.6247 16.2337 26.4 15.104 25.9634 14.05C25.5268 12.996 24.8869 12.0383 24.0802 11.2315C23.2734 10.4248 22.3157 9.78491 21.2617 9.34832C20.2077 8.91172 19.078 8.68701 17.9371 8.68701C15.633 8.68701 13.4233 9.60231 11.794 11.2315C10.1648 12.8608 9.24951 15.0705 9.24951 17.3746C9.24951 19.6787 10.1648 21.8884 11.794 23.5177C13.4233 25.1469 15.633 26.0622 17.9371 26.0622Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M26.6245 17.3749C26.6245 16.2341 26.3998 15.1044 25.9632 14.0504C25.5266 12.9964 24.8867 12.0388 24.08 11.2321C23.2733 10.4254 22.3157 9.78549 21.2617 9.34892C20.2077 8.91234 19.078 8.68764 17.9372 8.68764C16.7964 8.68764 15.6667 8.91234 14.6128 9.34892C13.5588 9.78549 12.6011 10.4254 11.7944 11.2321C10.9877 12.0388 10.3478 12.9964 9.91125 14.0504C9.47467 15.1044 9.24997 16.2341 9.24997 17.3749C9.24997 19.6789 10.1652 21.8885 11.7944 23.5177C13.4236 25.1469 15.6332 26.0621 17.9372 26.0621C20.2412 26.0621 22.4509 25.1469 24.08 23.5177C25.7092 21.8885 26.6245 19.6789 26.6245 17.3749ZM8.25 17.3749C8.25 14.8056 9.27063 12.3416 11.0874 10.5249C12.9041 8.70813 15.3681 7.6875 17.9374 7.6875C20.5066 7.6875 22.9707 8.70813 24.7874 10.5249C26.6041 12.3416 27.6248 14.8056 27.6248 17.3749C27.6248 19.9441 26.6041 22.4082 24.7874 24.2249C22.9707 26.0416 20.5066 27.0623 17.9374 27.0623C15.3681 27.0623 12.9041 26.0416 11.0874 24.2249C9.27063 22.4082 8.25 19.9441 8.25 17.3749Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M20.918 15.0128C21.2377 15.1228 21.3629 15.7777 21.6856 15.6075C21.9039 15.4915 22.0829 15.3134 22.2 15.0957C22.3171 14.878 22.367 14.6304 22.3433 14.3844C22.3197 14.1383 22.2237 13.9048 22.0673 13.7133C21.911 13.5218 21.7014 13.381 21.465 13.3086C21.2286 13.2363 20.9761 13.2357 20.7394 13.3068C20.5026 13.378 20.2923 13.5178 20.135 13.7084C19.9777 13.8991 19.8805 14.1322 19.8556 14.3781C19.8308 14.6241 19.8794 14.8719 19.9954 15.0902C20.148 15.3779 20.6331 14.9104 20.9204 15.0104L20.918 15.0128ZM15.0306 15.0128C14.7109 15.1228 14.5831 15.7777 14.263 15.6075C14.0449 15.4915 13.866 15.3134 13.749 15.0958C13.632 14.8781 13.5822 14.6307 13.6058 14.3847C13.6295 14.1387 13.7255 13.9053 13.8818 13.7139C14.0381 13.5225 14.2476 13.3818 14.4839 13.3094C14.7202 13.2371 14.9726 13.2365 15.2093 13.3076C15.4459 13.3787 15.6562 13.5184 15.8134 13.709C15.9707 13.8996 16.0679 14.1325 16.0928 14.3784C16.1177 14.6242 16.0691 14.8719 15.9533 15.0902C15.8006 15.3779 15.3132 14.9104 15.0282 15.0104L15.0306 15.0128Z",
									fill: "black"
								}), (0, l.jsx)("path", {
									d: "M17.8744 21.0101C20.3322 21.0101 21.1245 18.82 21.1245 17.6949C21.1245 17.1102 20.732 17.2951 20.1019 17.6049C19.5195 17.8926 18.7372 18.29 17.8771 18.29C16.0793 18.29 14.627 16.5702 14.627 17.6953C14.627 18.82 15.4169 21.0101 17.8771 21.0101H17.8744Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M16.0476 20.4378C16.1796 20.1698 16.3654 19.9318 16.5934 19.7387C16.8214 19.5457 17.0867 19.4016 17.3728 19.3155C17.4725 19.2856 17.5752 19.4578 17.6825 19.6352C17.7825 19.8053 17.8877 19.9779 17.9926 19.9779C18.105 19.9779 18.2177 19.8081 18.325 19.6403C18.4377 19.4654 18.5477 19.2956 18.655 19.3279C19.1921 19.4983 19.641 19.8727 19.9052 20.3705C20.8374 19.6355 21.1801 18.4352 21.1801 17.6954C21.1801 17.1107 20.7876 17.2956 20.1575 17.6053L20.1224 17.6229C19.5449 17.9106 18.7749 18.2904 17.93 18.2904C17.0851 18.2904 16.3178 17.9106 15.7376 17.6229C15.0879 17.3004 14.6802 17.098 14.6802 17.6954C14.6802 18.4578 15.0452 19.7105 16.0476 20.4378Z",
									fill: "black"
								}), (0, l.jsx)("path", {
									d: "M23.8125 16.1876C23.9206 16.1898 24.0281 16.1704 24.1286 16.1306C24.2291 16.0908 24.3207 16.0313 24.3979 15.9556C24.4751 15.88 24.5365 15.7896 24.5784 15.69C24.6203 15.5903 24.6418 15.4832 24.6418 15.3751C24.6418 15.267 24.6203 15.16 24.5784 15.0603C24.5365 14.9606 24.4751 14.8703 24.3979 14.7946C24.3207 14.719 24.2291 14.6595 24.1286 14.6196C24.0281 14.5798 23.9206 14.5604 23.8125 14.5627C23.5999 14.567 23.3975 14.6546 23.2487 14.8065C23.0999 14.9583 23.0166 15.1625 23.0166 15.3751C23.0166 15.5878 23.0999 15.7919 23.2487 15.9438C23.3975 16.0957 23.5999 16.1832 23.8125 16.1876ZM12.1876 16.1876C12.2957 16.1898 12.4031 16.1704 12.5036 16.1306C12.6042 16.0908 12.6957 16.0313 12.773 15.9556C12.8502 15.88 12.9116 15.7896 12.9534 15.69C12.9953 15.5903 13.0169 15.4832 13.0169 15.3751C13.0169 15.267 12.9953 15.16 12.9534 15.0603C12.9116 14.9606 12.8502 14.8703 12.773 14.7946C12.6957 14.719 12.6042 14.6595 12.5036 14.6196C12.4031 14.5798 12.2957 14.5604 12.1876 14.5627C11.975 14.567 11.7726 14.6546 11.6238 14.8065C11.475 14.9583 11.3917 15.1625 11.3917 15.3751C11.3917 15.5878 11.475 15.7919 11.6238 15.9438C11.7726 16.0957 11.975 16.1832 12.1876 16.1876ZM10.5152 19.9375C10.6424 19.9375 10.8002 19.9925 10.97 20.0998C11.5052 20.4401 12.5327 22.2073 12.9101 22.8948C13.0353 23.1251 13.2525 23.2224 13.445 23.2224C13.8328 23.2224 14.1325 22.8398 13.4828 22.3527C12.5024 21.6199 12.8452 20.4226 13.3127 20.35C13.3326 20.3449 13.3549 20.3449 13.3725 20.3449C13.7977 20.3449 13.985 21.0774 13.985 21.0774C13.985 21.0774 14.535 22.4576 15.4804 23.4025C16.4226 24.3448 16.4724 25.1024 15.7849 26.1099C15.315 26.7974 14.4175 27.0047 13.4952 27.0047C12.5427 27.0047 11.5626 26.7799 11.015 26.64C10.9875 26.6324 7.65282 25.6899 8.07529 24.89C8.14507 24.7549 8.26263 24.6999 8.4101 24.6999C9.00513 24.6999 10.0852 25.585 10.5527 25.585C10.6551 25.585 10.7277 25.5424 10.76 25.4348C10.9576 24.7225 7.74529 24.4225 8.01513 23.3926C8.06532 23.21 8.19285 23.1375 8.37504 23.1375C9.16016 23.1375 10.925 24.5201 11.2952 24.5201C11.3227 24.5201 11.345 24.5125 11.355 24.495C11.5403 24.1949 11.4375 23.9849 10.1302 23.1949C8.82741 22.405 7.91029 21.9299 8.43004 21.3627C8.49019 21.2974 8.5751 21.2675 8.68029 21.2675C9.47263 21.2675 11.345 22.9725 11.345 22.9725C11.345 22.9725 11.8504 23.4974 12.1577 23.4974C12.1921 23.4995 12.2264 23.4916 12.2566 23.4748C12.2867 23.458 12.3114 23.4329 12.3278 23.4025C12.5427 23.0375 10.3128 21.3473 10.1876 20.6498C10.1027 20.1751 10.2478 19.9375 10.5152 19.9375Z",
									fill: "black"
								}), (0, l.jsx)("path", {
									d: "M15.5686 26.1105C16.2561 25.1006 16.2063 24.3429 15.2637 23.4004C14.3187 22.4582 13.7687 21.0756 13.7687 21.0756C13.7687 21.0756 13.5639 20.2757 13.0964 20.3503C12.6289 20.4256 12.2861 21.6204 13.2662 22.353C14.2438 23.0855 13.0713 23.5829 12.6938 22.8954C12.3191 22.2079 11.2889 20.4407 10.7537 20.1007C10.2212 19.7632 9.8462 19.9505 9.97132 20.6507C10.0964 21.3478 12.3288 23.0381 12.1115 23.4007C11.8939 23.7678 11.1287 22.9731 11.1287 22.9731C11.1287 22.9731 8.73623 20.7954 8.21373 21.3626C7.69398 21.9302 8.61145 22.4052 9.91392 23.1952C11.2212 23.9851 11.324 24.1951 11.1387 24.4952C10.9514 24.7953 8.06901 22.3626 7.79882 23.3952C7.52898 24.4227 10.7413 24.72 10.544 25.4326C10.3439 26.1452 8.2787 24.0875 7.85898 24.8874C7.43376 25.6901 10.7712 26.6327 10.7987 26.6402C11.874 26.92 14.6113 27.5127 15.5689 26.1102L15.5686 26.1105Z",
									fill: "white"
								}), (0, l.jsx)("path", {
									d: "M25.4848 18.9375C25.8897 18.9375 26.2524 19.1025 26.5023 19.405C26.7178 19.6707 26.835 20.0028 26.8347 20.3448C26.9928 20.2974 27.1571 20.2719 27.3225 20.2699C27.7099 20.2699 28.0598 20.4177 28.3073 20.6848C28.5282 20.914 28.6675 21.2096 28.7036 21.5259C28.7398 21.8422 28.6708 22.1616 28.5074 22.4348C28.7277 22.6158 28.8836 22.8631 28.9522 23.1398C29.0123 23.3647 29.0725 23.8397 28.7525 24.3247C28.8724 24.5092 28.9438 24.721 28.9599 24.9404C28.9761 25.1598 28.9366 25.3797 28.8449 25.5798C28.5899 26.1597 27.9522 26.6145 26.7171 27.1047C25.9471 27.4099 25.2424 27.6048 25.2373 27.6072C24.3467 27.854 23.4288 27.9884 22.5048 28.0073C21.0401 28.0073 19.9923 27.557 19.3901 26.6722C18.42 25.2498 18.5575 23.9473 19.815 22.6923C20.51 21.9972 20.9724 20.9749 21.0673 20.7501C21.2625 20.0849 21.775 19.3448 22.6275 19.3448C22.8543 19.3485 23.077 19.4062 23.277 19.5133C23.477 19.6203 23.6485 19.7735 23.7774 19.9602C24.0273 19.6449 24.2724 19.3974 24.4948 19.2548C24.7877 19.0566 25.1312 18.9465 25.4848 18.9375ZM25.4848 19.9375C25.3576 19.9375 25.2022 19.9925 25.03 20.0997C24.4972 20.44 23.4673 22.2072 23.0899 22.8947C23.039 22.9929 22.9622 23.0752 22.868 23.1329C22.7737 23.1907 22.6655 23.2216 22.555 23.2223C22.17 23.2223 21.8675 22.8397 22.5199 22.3527C23.4972 21.6198 23.1548 20.4225 22.6873 20.35C22.6676 20.3467 22.6476 20.345 22.6275 20.3448C22.2023 20.3448 22.015 21.0773 22.015 21.0773C22.015 21.0773 21.465 22.4575 20.5224 23.4025C19.5774 24.3447 19.5273 25.1023 20.2175 26.1098C20.685 26.7973 21.5849 27.0046 22.5048 27.0046C23.4598 27.0046 24.4374 26.7798 24.9874 26.6399C25.0125 26.6323 28.3499 25.6898 27.9275 24.8899C27.8549 24.7548 27.7398 24.6998 27.5923 24.6998C26.9976 24.6998 25.9148 25.5849 25.4497 25.5849C25.3449 25.5849 25.2723 25.5423 25.2424 25.4347C25.0424 24.7225 28.2547 24.4224 27.9849 23.3925C27.9374 23.21 27.8096 23.1374 27.625 23.1374C26.8398 23.1374 25.0747 24.52 24.7048 24.52C24.6797 24.52 24.6574 24.5124 24.6474 24.4949C24.4625 24.1948 24.5625 23.9848 25.8674 23.1948C27.1747 22.4049 28.0921 21.9298 27.5672 21.3627C27.5098 21.2973 27.4249 21.2674 27.3225 21.2674C26.5274 21.2674 24.655 22.9724 24.655 22.9724C24.655 22.9724 24.1497 23.4973 23.8448 23.4973C23.8104 23.4988 23.7764 23.4907 23.7464 23.474C23.7164 23.4572 23.6917 23.4325 23.6749 23.4025C23.4573 23.0374 25.6873 21.3472 25.8124 20.6497C25.8973 20.175 25.7522 19.9375 25.4848 19.9375Z",
									fill: "black"
								}), (0, l.jsx)("path", {
									d: "M10.2989 18.9375C9.89397 18.9375 9.53131 19.1025 9.28141 19.405C9.06588 19.6707 8.94866 20.0028 8.949 20.3448C8.79088 20.2974 8.62656 20.2719 8.46122 20.2699C8.07382 20.2699 7.72388 20.4177 7.47638 20.6848C7.25549 20.914 7.11622 21.2096 7.08006 21.5259C7.0439 21.8422 7.11287 22.1616 7.27631 22.4348C7.05604 22.6158 6.90004 22.8631 6.8315 23.1398C6.77135 23.3647 6.71119 23.8397 7.03122 24.3247C6.91128 24.5092 6.83991 24.721 6.82374 24.9404C6.80758 25.1598 6.84714 25.3797 6.93875 25.5798C7.19381 26.1597 7.83147 26.6145 9.06656 27.1047C9.83656 27.4099 10.5413 27.6048 10.5464 27.6072C11.437 27.854 12.3549 27.9884 13.2789 28.0073C14.7436 28.0073 15.7913 27.557 16.3936 26.6722C17.3637 25.2498 17.2262 23.9473 15.9687 22.6923C15.2737 21.9972 14.8113 20.9749 14.7164 20.7501C14.5212 20.0849 14.0087 19.3448 13.1562 19.3448C12.9294 19.3485 12.7067 19.4062 12.5067 19.5133C12.3067 19.6203 12.1352 19.7735 12.0063 19.9602C11.7564 19.6449 11.5113 19.3974 11.2889 19.2548C10.996 19.0566 10.6525 18.9465 10.2989 18.9375ZM10.2989 19.9375C10.4261 19.9375 10.5815 19.9925 10.7537 20.0997C11.2865 20.44 12.3164 22.2072 12.6938 22.8947C12.7447 22.9929 12.8214 23.0752 12.9157 23.1329C13.0099 23.1907 13.1182 23.2216 13.2287 23.2223C13.6137 23.2223 13.9162 22.8397 13.2638 22.3527C12.2865 21.6198 12.6288 20.4225 13.0963 20.35C13.1161 20.3467 13.1361 20.345 13.1562 20.3448C13.5814 20.3448 13.7687 21.0773 13.7687 21.0773C13.7687 21.0773 14.3187 22.4575 15.2613 23.4025C16.2063 24.3447 16.2564 25.1023 15.5662 26.1098C15.0987 26.7973 14.1988 27.0046 13.2789 27.0046C12.3239 27.0046 11.3463 26.7798 10.7963 26.6399C10.7712 26.6323 7.43375 25.6898 7.85622 24.8899C7.92875 24.7548 8.04391 24.6998 8.19138 24.6998C8.78607 24.6998 9.86888 25.5849 10.334 25.5849C10.4388 25.5849 10.5113 25.5423 10.5413 25.4347C10.7413 24.7225 7.52897 24.4224 7.79881 23.3925C7.84625 23.21 7.97413 23.1374 8.15872 23.1374C8.94385 23.1374 10.709 24.52 11.0789 24.52C11.104 24.52 11.1263 24.5124 11.1363 24.4949C11.3212 24.1948 11.2212 23.9848 9.91631 23.1948C8.60903 22.4049 7.69156 21.9298 8.21647 21.3627C8.27388 21.2973 8.35878 21.2674 8.46122 21.2674C9.25632 21.2674 11.1287 22.9724 11.1287 22.9724C11.1287 22.9724 11.634 23.4973 11.9389 23.4973C11.9733 23.4988 12.0073 23.4907 12.0373 23.474C12.0673 23.4572 12.092 23.4325 12.1088 23.4025C12.3263 23.0374 10.0964 21.3472 9.97131 20.6497C9.88641 20.175 10.0315 19.9375 10.2989 19.9375Z",
									fill: "black"
								}), (0, l.jsx)("path", {
									d: "M20.2177 26.1095C19.5302 25.0996 19.578 24.342 20.523 23.3994C21.4655 22.4572 22.0155 21.0746 22.0155 21.0746C22.0155 21.0746 22.2204 20.2747 22.6903 20.3493C23.1554 20.4246 23.4981 21.6195 22.5205 22.352C21.5405 23.0845 22.7154 23.5819 23.0904 22.8944C23.4679 22.2069 24.4977 20.4397 25.0306 20.0997C25.563 19.7622 25.9405 19.9495 25.8129 20.6497C25.6878 21.3469 23.4582 23.0371 23.6755 23.3997C23.8903 23.7669 24.6552 22.9721 24.6552 22.9721C24.6552 22.9721 27.0504 20.7945 27.5702 21.362C28.0903 21.9295 27.1756 22.4046 25.8703 23.1945C24.5631 23.9845 24.463 24.1945 24.6456 24.4946C24.8329 24.7947 27.7152 22.362 27.9854 23.3946C28.2553 24.4221 25.0453 24.7194 25.243 25.432C25.4431 26.1446 27.5052 24.0869 27.9277 24.8868C28.3505 25.6895 25.0154 26.632 24.9879 26.6396C23.9103 26.9194 21.173 27.512 20.2181 26.1095H20.2177Z",
									fill: "white"
								})]
							}), (0, l.jsx)("defs", {
								children: (0, l.jsx)("clipPath", {
									id: "clip0_443_40935",
									children: (0, l.jsx)("rect", {
										width: "22",
										height: "22",
										fill: "white",
										transform: "translate(7 7)"
									})
								})
							})]
						})
					})
				},
				f = function() {
					return (0, l.jsx)("div", {
						className: "cursor-pointer",
						onClick: function() {
							return window.open("https://www.linkedin.com/company/minimax-ai/", "_blank")
						},
						children: (0, l.jsxs)("svg", {
							width: "36",
							height: "36",
							viewBox: "0 0 36 36",
							fill: "none",
							xmlns: "http://www.w3.org/2000/svg",
							children: [(0, l.jsx)("path", {
								d: "M13.3403 11.0023C13.3153 9.86569 12.5025 9 11.1827 9C9.86286 9 9 9.86569 9 11.0023C9 12.1153 9.83736 13.0059 11.1326 13.0059H11.1573C12.5025 13.0059 13.3403 12.1153 13.3403 11.0023Z",
								fill: "white"
							}), (0, l.jsx)("path", {
								d: "M13.0862 14.5882H9.22813V26.1802H13.0862V14.5882Z",
								fill: "white"
							}), (0, l.jsx)("path", {
								d: "M22.5579 14.316C25.0967 14.316 27 15.9731 27 19.5337L26.9999 26.1802H23.1419V19.9785C23.1419 18.4207 22.5836 17.3578 21.187 17.3578C20.1211 17.3578 19.4862 18.0744 19.2074 18.7665C19.1054 19.0145 19.0803 19.3601 19.0803 19.7066V26.1805H15.2218C15.2218 26.1805 15.2726 15.6762 15.2218 14.5885H19.0803V16.2304C19.5924 15.4411 20.5095 14.316 22.5579 14.316Z",
								fill: "white"
							})]
						})
					})
				};

			function g(e) {
				var C = e.isShowList,
					t = void 0 === C ? [] : C;
				return (0, l.jsxs)("div", {
					className: "flex gap-[12px] mb-[8px]",
					children: [t.includes(n.DISCORD) && (0, l.jsx)(p, {}), t.includes(n.TWITTER) && (0, l.jsx)(h, {}), t.includes(n.LINKEDIN) && (0, l.jsx)(f, {}), t.includes(n.EMAIL) && (0, l.jsx)(u, {}), t.includes(n.WECHAT) && (0, l.jsx)(x, {}), t.includes(n.GITHUB) && (0, l.jsx)(w, {}), t.includes(n.HUGGINGFACE) && (0, l.jsx)(m, {})]
				})
			}(i = n || (n = {})).DISCORD = "discord", i.TWITTER = "twitter", i.EMAIL = "email", i.WECHAT = "wechat", i.GITHUB = "github", i.HUGGINGFACE = "huggingFace", i.LINKEDIN = "linkedin"
		},
		72893: function(e, C, t) {
			t.d(C, {
				I: function() {
					return n
				},
				a: function() {
					return i
				}
			});
			var i = [{
					title: "技术前沿",
					items: [{
						label: "文本模型",
						link: "minimax-01-%E7%B3%BB%E5%88%97.html"
					}, {
						label: "语音模型",
						link: "t2a-01-hd-%E5%8F%91%E5%B8%83.html"
					}, {
						label: "视频模型",
						link: "s2v-01%E5%8F%91%E5%B8%83.html"
					}]
				}, {
					title: "最新更新",
					items: [{
						label: "MiniMax-Text-01",
						link: "minimax-01-%E7%B3%BB%E5%88%97.html"
					}, {
						label: "S2V-01",
						link: "s2v-01%E5%8F%91%E5%B8%83.html"
					}, {
						label: "T2A-01-HD",
						link: "t2a-01-hd-%E5%8F%91%E5%B8%83.html"
					}]
				}, {
					title: "产品",
					items: [{
						label: "海螺AI",
						link: "https://hailuoai.com/"
					}, {
						label: "星野",
						link: "https://www.xingyeai.com/"
					}, {
						label: "开放平台",
						link: "platform.html"
					}]
				}, {
					title: "关于我们",
					items: [{
						label: "新闻动态",
						link: "news.html"
					}, {
						label: "公司简介",
						link: "about.html"
					}, {
						label: "社会招聘",
						link: "https://vrfi1sk8a0.jobs.feishu.cn/index"
					}, {
						label: "校园招聘",
						link: "https://vrfi1sk8a0.jobs.feishu.cn/379481"
					}]
				}],
				n = [{
					title: "Technology",
					items: [{
						label: "Text",
						link: "minimax-01-series-2.html"
					}, {
						label: "Speech",
						link: "speech-01-hd-release.html"
					}, {
						label: "Video",
						link: "s2v-01-release.html"
					}, {
						label: "Music",
						link: "music-01.html"
					}]
				}, {
					title: "Update",
					items: [{
						label: "MiniMax-Text-01",
						link: "minimax-01-series-2.html"
					}, {
						label: "S2V-01",
						link: "s2v-01-release.html"
					}, {
						label: "T2A-01-HD",
						link: "speech-01-hd-release.html"
					}, {
						label: "music-01",
						link: "music-01.html"
					}]
				}, {
					title: "Product",
					items: [{
						label: "Hailuo AI",
						link: "https://hailuoai.video/"
					}, {
						label: "Talkie",
						link: "https://www.talkie-ai.com/"
					}]
				}, {
					title: "About us",
					items: [{
						label: "company",
						link: "about.html"
					}]
				}]
		}
	}
]);